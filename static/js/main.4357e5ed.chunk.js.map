{"version":3,"sources":["components/DayWidget.tsx","components/CurrentInfoWidget.tsx","components/Notify.tsx","util/theme.ts","util/useTheme.ts","util/axios.ts","components/ThemeToggle.tsx","components/CustomLoader.tsx","components/ForecastContainer.tsx","components/Geolocation.tsx","util/services.ts","App.tsx","util/useLocation.ts","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","props","theme","fontColor","bgColor","Title","h3","TemperatureContainer","Description","p","DayWidget","date","icon","high","low","format","Date","src","toFixed","InfoContainer","Location","h2","DateContainer","Temperature","Type","CurrentInfoWidget","timezone","type","loading","temperature","Message","Notify","children","lightTheme","background","cardColors","darkTheme","useTheme","useState","setTheme","useEffect","storedTheme","localStorage","getItem","toggleTheme","setItem","axiosInstance","axios","create","baseURL","process","timeout","ToggleContainer","span","ThemeToggle","onClick","size","color","CustomLoader","height","width","ForecastContent","ForecastContentInner","ForecastContainer","data","current","weather","main","dt","temp","daily","slice","map","el","idx","min","max","Geolocation","error","getWeather","lat","lon","a","get","params","MainContainer","App","location","setLocation","locationError","setLocationError","loadingLocation","setLoadingLocation","navigator","geolocation","getCurrentPosition","onSuccess","onError","maximumAge","enableHighAccuracy","coords","latitude","longitude","message","useLocation","weatherData","setWeatherData","loadingWeather","setLoadingWeather","Object","keys","length","fetchData","res","status","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4357e5ed.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport format from 'date-fns/format';\n\nconst Container = styled.div<{ bgColor: string | undefined }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  border-radius: 20px;\n  color: ${(props) => props.theme.fontColor};\n  background: ${(props) => props.bgColor};\n  width: calc(100vw / 5);\n  max-width: 220px;\n  height: 254px;\n  margin: 0 0.6rem;\n\n  @media (max-width: 900px) {\n    width: 150px;\n    padding: 0 1rem;\n    margin: 0 0.5rem;\n    height: 200px;\n  }\n`;\n\nconst Title = styled.h3`\n  font-size: 1.4em;\n  margin: 0;\n  padding: 0;\n  font-weight: 300;\n`;\n\nconst TemperatureContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: space-evenly;\n  width: 100%;\n`;\n\nconst Description = styled.p`\n  color: ${(props) => props.theme.fontColor};\n`;\n\ninterface Props {\n  date: number;\n  icon?: any;\n  high?: number;\n  low?: number;\n  bgColor?: string;\n}\n\nfunction DayWidget({ date, icon, high, low, bgColor }: Props) {\n  return (\n    <Container bgColor={bgColor}>\n      <Title>{format(new Date(date * 1000), 'EEEE')}</Title>\n      <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n      <TemperatureContainer>\n        <Description>L: {low?.toFixed(0)}&deg;</Description>\n        <Description>H: {high?.toFixed(0)}&deg;</Description>\n      </TemperatureContainer>\n    </Container>\n  );\n}\n\nexport default DayWidget;\n","import React from 'react';\nimport styled from 'styled-components';\nimport format from 'date-fns/format';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 400px;\n  margin-bottom: 5rem;\n  margin-left: 3rem;\n\n  @media (max-width: 900px) {\n    align-items: center;\n    margin: 0;\n    width: 100%;\n    padding: 2rem 0;\n  }\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-top: -2rem;\n  margin-left: -2rem;\n`;\n\nconst Location = styled.h2`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 2rem;\n  margin: 0;\n`;\n\nconst DateContainer = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 1.4rem;\n  margin: 0;\n  font-weight: 300;\n`;\n\nconst Temperature = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 4rem;\n  text-align: left;\n`;\n\nconst Type = styled.p`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 1.4rem;\n  margin: 0;\n  font-weight: 300;\n`;\n\ninterface Props {\n  timezone: string;\n  date: number;\n  type: string;\n  temperature: number;\n  loading: boolean;\n  icon: string;\n}\n\nfunction CurrentInfoWidget({\n  timezone,\n  date,\n  type,\n  loading,\n  temperature,\n  icon,\n}: Props) {\n  return (\n    <Container>\n      {!loading && (\n        <>\n          <Location>{timezone}</Location>\n          <DateContainer>\n            {format(new Date(date * 1000), \"EEEE dd',' MMMM\")}\n          </DateContainer>\n\n          <InfoContainer>\n            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n            <Temperature>\n              {temperature.toFixed(0)}&deg; <Type>{type}</Type>\n            </Temperature>\n          </InfoContainer>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default CurrentInfoWidget;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  flex: 1;\n`;\n\nconst Message = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 4;\n  margin: 0;\n  text-align: center;\n  padding: 0 0.4rem;\n`;\n\nfunction Notify({ children }: { children: React.ReactChild }) {\n  return (\n    <Container>\n      <Message>{children}</Message>\n    </Container>\n  );\n}\n\nexport default Notify;\n","export const lightTheme = {\n  background: '#e0e0e0',\n  cardColors: ['#C7B0C8', '#B3B2C9', '#CBBA9B', '#BDBACC', '#D59A98'],\n  fontColor: '#2D2D2D',\n};\n\nexport const darkTheme = {\n  background: 'linear-gradient(130deg, #000000, #284DB1)',\n  cardColors: ['#823588', '#383588', '#AC863F', '#9D96B8', '#C3423F'],\n  fontColor: '#FFFFFF',\n};\n","import { useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\nexport const useTheme = (): { theme: Theme; toggleTheme: () => void } => {\n  const [theme, setTheme] = useState<Theme>('dark');\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme') as Theme;\n    if (storedTheme) {\n      setTheme(storedTheme);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      localStorage.setItem('theme', 'dark');\n      return setTheme('dark');\n    }\n\n    localStorage.setItem('theme', 'light');\n    return setTheme('light');\n  };\n\n  return { theme, toggleTheme };\n};\n","import axios from 'axios';\n\n/**\n * Create the weather api axios instance. Receives a default env value\n * as REACT_APP_API_URL\n */\n\nexport const axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  timeout: 10000,\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../util';\nimport { WiDaySunny, WiNightClear } from 'weather-icons-react';\n\nconst ToggleContainer = styled.span`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n`;\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n  return (\n    <ToggleContainer onClick={toggleTheme}>\n      {theme === 'dark' && <WiDaySunny size={40} color=\"#fff\" />}\n      {theme === 'light' && <WiNightClear size={40} color=\"#2d2d2d\" />}\n    </ToggleContainer>\n  );\n}\n\nexport default ThemeToggle;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Loader from 'react-loader-spinner';\nimport { useTheme, darkTheme, lightTheme } from '../util';\n\nconst Container = styled.div`\n  width: inherit;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction CustomLoader() {\n  const { theme } = useTheme();\n\n  return (\n    <Container>\n      <Loader\n        type=\"Rings\"\n        color={theme === 'dark' ? darkTheme.fontColor : lightTheme.fontColor}\n        height={100}\n        width={100}\n      />\n    </Container>\n  );\n}\n\nexport default CustomLoader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { lightTheme, darkTheme, useTheme } from '../util';\nimport CurrentInfoWidget from './CurrentInfoWidget';\nimport DayWidget from './DayWidget';\nimport CustomLoader from './CustomLoader';\nimport Notify from './Notify';\n\nexport const ForecastContent = styled.div`\n  padding: 3rem;\n  @media (max-width: 900px) {\n    padding: 4rem 0rem;\n  }\n`;\n\nexport const ForecastContentInner = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  max-width: 100vw;\n  width: 100%;\n  margin: 0 auto;\n\n  @media (max-width: 900px) {\n    justify-content: flex-start;\n    flex-direction: row;\n    overflow-x: scroll;\n    margin: 0 0.4rem;\n  }\n`;\n\ninterface Props {\n  data: any;\n  loading: boolean;\n}\n\nfunction ForecastContainer({ data, loading }: Props) {\n  const { theme } = useTheme();\n\n  return (\n    <>\n      {loading ? (\n        <CustomLoader />\n      ) : data === null ? (\n        <Notify>\n          There was an error handling the request. Please try again soon.\n        </Notify>\n      ) : (\n        <ForecastContent>\n          <CurrentInfoWidget\n            timezone={data.timezone}\n            type={data.current.weather[0].main}\n            icon={data.current.weather[0].icon}\n            date={data.current.dt}\n            loading={loading}\n            temperature={data.current.temp}\n          />\n\n          <ForecastContentInner>\n            {data &&\n              data.daily\n                .slice(0, 5)\n                .map((el: any, idx: number) => (\n                  <DayWidget\n                    key={el.dt}\n                    date={el.dt}\n                    low={el.temp.min}\n                    high={el.temp.max}\n                    icon={el.weather[0].icon}\n                    bgColor={\n                      theme === 'dark'\n                        ? darkTheme.cardColors[idx]\n                        : lightTheme.cardColors[idx]\n                    }\n                  />\n                ))}\n          </ForecastContentInner>\n        </ForecastContent>\n      )}\n    </>\n  );\n}\n\nexport default ForecastContainer;\n","import React from 'react';\nimport CustomLoader from './CustomLoader';\nimport Notify from './Notify';\n\ninterface Props {\n  loading: boolean;\n  error: any;\n}\n\nfunction Geolocation({ loading, error }: Props) {\n  return (\n    <>\n      {loading && (\n        <Notify>\n          <CustomLoader />\n        </Notify>\n      )}\n      {error && <Notify>{error}</Notify>}\n    </>\n  );\n}\n\nexport default Geolocation;\n","import { axiosInstance } from './axios';\n\n/**\n * API call to get weather data.\n */\nexport const getWeather = async (lat: number, lon: number) => {\n  try {\n    const weather = await axiosInstance.get('weather/forecast', {\n      params: {\n        lat,\n        lon,\n      },\n    });\n\n    return weather;\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { ThemeToggle, ForecastContainer, Geolocation } from './components';\nimport { lightTheme, darkTheme, useLocation, useTheme } from './util';\nimport { getWeather } from './util/services';\n\nconst MainContainer = styled.div`\n  background: ${(props) => props.theme.background};\n  min-height: 100vh;\n  height: 100%;\n  max-width: 100vw;\n  margin: 0;\n  overflow: hidden;\n`;\n\nfunction App() {\n  const { locationError, location, loadingLocation } = useLocation();\n  const { theme } = useTheme();\n\n  const [weatherData, setWeatherData] = useState<any>({});\n  const [loadingWeather, setLoadingWeather] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (!Object.keys(weatherData).length) {\n      fetchData();\n    }\n  }, [location]);\n\n  const fetchData = async () => {\n    if (location !== null && Object.keys(location!)) {\n      const res = await getWeather(location!.latitude, location!.longitude);\n\n      // Something wrong happened, handle error\n      if (res.status !== 200) {\n        setWeatherData(null);\n      } else {\n        setWeatherData(res.data);\n      }\n      setLoadingWeather(false);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>\n      <MainContainer>\n        <ThemeToggle />\n\n        <Geolocation error={locationError} loading={loadingLocation} />\n\n        <ForecastContainer data={weatherData} loading={loadingWeather} />\n      </MainContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\ninterface Coords {\n  latitude: number;\n  longitude: number;\n}\n\nexport const useLocation = (): {\n  location: Coords | null;\n  locationError: string | null;\n  loadingLocation: boolean;\n} => {\n  const [location, setLocation] = useState<Coords | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [loadingLocation, setLoadingLocation] = useState<boolean>(true);\n\n  useEffect(() => {\n    const location = navigator.geolocation;\n\n    if (!location) {\n      setLocationError('Geolocation is not supported');\n      return;\n    }\n\n    location.getCurrentPosition(onSuccess, onError, {\n      maximumAge: 60000,\n      timeout: 5000,\n      enableHighAccuracy: true,\n    });\n  }, []);\n\n  const onSuccess = ({ coords }: { coords: Coords }) => {\n    setLocation({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n    });\n    setLoadingLocation(false);\n  };\n  const onError = (error: PositionError) => {\n    setLocationError(error.message);\n    setLoadingLocation(false);\n  };\n\n  return { location, locationError, loadingLocation };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}