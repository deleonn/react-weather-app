{"version":3,"sources":["components/DayWidget.tsx","components/CurrentInfoWidget.tsx","components/Notify.tsx","util/theme.ts","util/axios.ts","util/services.ts","App.tsx","util/useLocation.ts","util/useTheme.ts","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","props","theme","fontColor","bgColor","Title","h3","TemperatureContainer","Description","p","DayWidget","date","icon","high","low","useContext","ThemeContext","format","Date","src","toFixed","InfoContainer","Location","h2","DateContainer","Temperature","Type","CurrentInfoWidget","timezone","type","loading","temperature","Message","Notify","children","lightTheme","background","cardColors","darkTheme","axiosInstance","axios","create","baseURL","process","timeout","getWeather","lat","lon","a","get","params","weather","MainContainer","ForecastContainer","ThemeToggle","span","App","useState","location","setLocation","locationError","setLocationError","setLoading","useEffect","navigator","geolocation","getCurrentPosition","onSuccess","onError","maximumAge","enableHighAccuracy","coords","latitude","longitude","error","message","useLocation","setTheme","storedTheme","localStorage","getItem","toggleTheme","setItem","useTheme","weatherData","setWeatherData","loadingWeather","setLoadingWeather","requestError","setRequestError","Object","keys","length","fetchData","res","status","data","onClick","size","color","style","padding","current","main","dt","temp","daily","slice","map","el","idx","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede234cd.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport format from 'date-fns/format';\n\nconst Container = styled.div<{ bgColor: string | undefined }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  border-radius: 20px;\n  color: ${(props) => props.theme.fontColor};\n  background: ${(props) => props.bgColor};\n  width: calc(100vw / 5);\n  max-width: 200px;\n  height: 254px;\n`;\n\nconst Title = styled.h3`\n  font-size: 1.4em;\n  margin: 0;\n  padding: 0;\n  font-weight: 300;\n`;\n\nconst TemperatureContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: space-evenly;\n  width: 100%;\n`;\n\nconst Description = styled.p`\n  color: ${(props) => props.theme.fontColor};\n`;\n\ninterface Props {\n  date: number;\n  icon?: any;\n  high?: number;\n  low?: number;\n  bgColor?: string;\n}\n\nfunction DayWidget({ date, icon, high, low, bgColor }: Props) {\n  const { fontColor } = useContext(ThemeContext);\n\n  return (\n    <Container bgColor={bgColor}>\n      <Title>{format(new Date(date * 1000), 'EEEE')}</Title>\n      <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n      <TemperatureContainer>\n        <Description>L: {low?.toFixed(0)}&deg;</Description>\n        <Description>H: {high?.toFixed(0)}&deg;</Description>\n      </TemperatureContainer>\n    </Container>\n  );\n}\n\nexport default DayWidget;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport format from 'date-fns/format';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 400px;\n  margin-bottom: 5rem;\n  margin-left: 3rem;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-top: -2rem;\n  margin-left: -2rem;\n`;\n\nconst Location = styled.h2`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 2rem;\n  margin: 0;\n`;\n\nconst DateContainer = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 1.4rem;\n  margin: 0;\n  font-weight: 300;\n`;\n\nconst Temperature = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 4rem;\n  text-align: left;\n`;\n\nconst Type = styled.p`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 1.4rem;\n  margin: 0;\n  font-weight: 300;\n`;\n\ninterface Props {\n  timezone: string;\n  date: number;\n  type: string;\n  temperature: number;\n  loading: boolean;\n  icon: string;\n}\n\nfunction CurrentInfoWidget({\n  timezone,\n  date,\n  type,\n  loading,\n  temperature,\n  icon,\n}: Props) {\n  const { fontColor } = useContext(ThemeContext);\n\n  return (\n    <Container>\n      {!loading && (\n        <>\n          <Location>{timezone}</Location>\n          <DateContainer>\n            {format(new Date(date * 1000), \"EEEE dd',' MMMM\")}\n          </DateContainer>\n\n          <InfoContainer>\n            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n            <Temperature>\n              {temperature.toFixed(0)}&deg; <Type>{type}</Type>\n            </Temperature>\n          </InfoContainer>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default CurrentInfoWidget;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n`;\n\nconst Message = styled.h3`\n  color: ${(props) => props.theme.fontColor};\n  font-size: 4;\n  margin: 0;\n`;\n\nfunction Notify({ children }: { children: React.ReactChild }) {\n  return (\n    <Container>\n      <Message>{children}</Message>\n    </Container>\n  );\n}\n\nexport default Notify;\n","export const lightTheme = {\n  background: '#e0e0e0',\n  cardColors: ['#C7B0C8', '#B3B2C9', '#CBBA9B', '#BDBACC', '#D59A98'],\n  fontColor: '#2D2D2D',\n};\n\nexport const darkTheme = {\n  background: 'linear-gradient(130deg, #000000, #284DB1)',\n  cardColors: ['#823588', '#383588', '#AC863F', '#9D96B8', '#C3423F'],\n  fontColor: '#FFFFFF',\n};\n","import axios from 'axios';\n\n/**\n * Create the weather api axios instance. Receives a default env value\n * as REACT_APP_API_URL\n */\n\nexport const axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  timeout: 10000,\n});\n","import { axiosInstance } from './axios';\n\n/**\n * API call to get weather data.\n */\nexport const getWeather = async (lat: number, lon: number) => {\n  try {\n    const weather = await axiosInstance.get('weather/forecast', {\n      params: {\n        lat,\n        lon,\n      },\n    });\n\n    return weather;\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { WiDaySunny, WiNightClear } from 'weather-icons-react';\nimport { CurrentInfoWidget, DayWidget, Notify } from './components';\nimport { lightTheme, darkTheme, useLocation, useTheme } from './util';\nimport { getWeather } from './util/services';\n\nconst MainContainer = styled.div`\n  background: ${(props) => props.theme.background};\n  height: 100vh;\n  max-width: 100vw;\n  margin: 0;\n  overflow: hidden;\n`;\n\nconst ForecastContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  max-width: 100vw;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst ThemeToggle = styled.span`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const { locationError, location, loading } = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  const [weatherData, setWeatherData] = useState<any>({});\n  const [loadingWeather, setLoadingWeather] = useState<boolean>(true);\n  const [requestError, setRequestError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!Object.keys(weatherData).length) {\n      fetchData();\n    }\n  }, [location]);\n\n  const fetchData = async () => {\n    if (location !== null && Object.keys(location!)) {\n      const res = await getWeather(location!.latitude, location!.longitude);\n\n      // Something wrong happened, handle error\n      if (res.status !== 200) {\n        setRequestError(true);\n      } else {\n        setWeatherData(res.data);\n      }\n      setLoadingWeather(false);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>\n      <MainContainer>\n        <ThemeToggle onClick={toggleTheme}>\n          {theme === 'dark' && <WiDaySunny size={40} color=\"#fff\" />}\n          {theme === 'light' && <WiNightClear size={40} color=\"#2d2d2d\" />}\n        </ThemeToggle>\n\n        {locationError && <Notify>{locationError}</Notify>}\n\n        {(loading || loadingWeather) && (\n          <Notify>\n            Loading... be sure your browser allows sharing your current location\n          </Notify>\n        )}\n\n        {requestError && (\n          <Notify>\n            There was an error handling the request. Please try again soon.\n          </Notify>\n        )}\n\n        {!loadingWeather && !requestError && (\n          <div style={{ padding: '3rem' }}>\n            <CurrentInfoWidget\n              timezone={weatherData.timezone}\n              type={weatherData.current.weather[0].main}\n              icon={weatherData.current.weather[0].icon}\n              date={weatherData.current.dt}\n              loading={loadingWeather}\n              temperature={weatherData.current.temp}\n            />\n\n            <ForecastContainer>\n              {weatherData &&\n                weatherData.daily\n                  .slice(0, 5)\n                  .map((el: any, idx: number) => (\n                    <DayWidget\n                      key={el.dt}\n                      date={el.dt}\n                      low={el.temp.min}\n                      high={el.temp.max}\n                      icon={el.weather[0].icon}\n                      bgColor={\n                        theme === 'dark'\n                          ? darkTheme.cardColors[idx]\n                          : lightTheme.cardColors[idx]\n                      }\n                    />\n                  ))}\n            </ForecastContainer>\n          </div>\n        )}\n      </MainContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\ninterface Coords {\n  latitude: number;\n  longitude: number;\n}\n\nexport const useLocation = (): {\n  location: Coords | null;\n  locationError: string | null;\n  loading: boolean;\n} => {\n  const [location, setLocation] = useState<Coords | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const location = navigator.geolocation;\n\n    if (!location) {\n      setLocationError('Geolocation is not supported');\n      return;\n    }\n\n    location.getCurrentPosition(onSuccess, onError, {\n      maximumAge: 60000,\n      timeout: 5000,\n      enableHighAccuracy: true,\n    });\n  }, []);\n\n  const onSuccess = ({ coords }: { coords: Coords }) => {\n    setLocation({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n    });\n    setLoading(false);\n  };\n  const onError = (error: PositionError) => {\n    setLocationError(error.message);\n    setLoading(false);\n  };\n\n  return { location, locationError, loading };\n};\n","import { useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\nexport const useTheme = (): { theme: Theme; toggleTheme: () => void } => {\n  const [theme, setTheme] = useState<Theme>('dark');\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme') as Theme;\n    if (storedTheme) {\n      setTheme(storedTheme);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      localStorage.setItem('theme', 'dark');\n      return setTheme('dark');\n    }\n\n    localStorage.setItem('theme', 'light');\n    return setTheme('light');\n  };\n\n  return { theme, toggleTheme };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}